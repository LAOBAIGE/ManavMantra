
%   Copyright 2015-2017 The MathWorks, Inc.

classdef WebUIAxesController  < matlab.ui.internal.controller.WebCanvasContainerController
      
    properties
        
        % String properties that require no specific handling to / from
        % view.
        %
        % All of these will be forwarded as is back and forth during
        % initialization and edits.
        %
        % FontSizeMode should not be exposed in UIAxes for 18a
        % Since UIAxes does not have dynamic font re-size that is controlled
        % by FontSizeMode
        GenericStringProperties = {...
            'ALimMode',... 
            'AlphaScale',...
            'Box', ...
            'BoxStyle',...
            'Clipping',...
            'ClippingStyle',...
            'ColorScale',...
            'Layer', ...
            'DataAspectRatioMode', ...
            'CameraPositionMode',...
            'CameraTargetMode',...
            'CameraViewAngleMode',...
            'Projection',...
            'SortMethod',...
            'CameraUpVectorMode',...
            'PlotBoxAspectRatioMode', ...
            'XColorMode', ...
            'YColorMode', ...
            'ZColorMode', ...
            'CLimMode', ...
            'GridAlphaMode',...
            'MinorGridAlphaMode',...
            'XAxisLocation', ...
            'XScale',...
            'XDir', ...
            'XLimMode', ...
            'YAxisLocation', ...
            'YScale',...
            'YDir', ...
            'YLimMode', ...
            'ZDir', ...
            'ZLimMode', ...
            'ZScale',...
            'GridColorMode', ...
            'GridLineStyle', ...
            'MinorGridColorMode', ...
            'MinorGridLineStyle',...
            'XGrid', ...			
            'XMinorGrid', ...
            'YGrid', ...
            'YMinorGrid', ...
            'ZGrid', ...
            'ZMinorGrid', ...
            'LineStyleOrder', ...
            'NextPlot', ...
            'TickDir', ...
            'TickDirMode', ...
            'TickLabelInterpreter',...
            'XMinorTick', ...
			'XTickMode', ...
            'XTickLabelMode', ...
            'YMinorTick', ...
			'YTickMode', ...
            'YTickLabelMode', ...
            'ZMinorTick',...
            'ZTickMode', ...
            'ZTickLabelMode', ...
            'FontName', ...
            'FontWeight', ...
            'FontAngle', ...
            'FontUnits', ...
            'FontSmoothing',...
            ...'FontSizeMode',...
            'TitleFontWeight',...
			'Visible', ...
            'HandleVisibility', ...
            'BusyAction', ...
            'Interruptible' ...
            }                    
        
        GenericNumericProperties = {
            'ALim',...
            'Alphamap',...    
            'LabelFontSizeMultiplier',...
            'CameraPosition',...            
            'CameraTarget',...
            'CameraViewAngle',...
            'View',...
            'CameraUpVector',...
            'LineWidth', ...            
            'DataAspectRatio', ...
            'PlotBoxAspectRatio', ...
            'ColorOrderIndex', ...
            'CLim', ...            
            'XLim', ...
            'YLim', ...
            'ZLim', ...
            'GridAlpha', ...
            'MinorGridAlpha', ...
            'LineStyleOrderIndex', ...
            'TickLength', ...
            'XTick', ...
            'XTickLabelRotation', ...
            'YTick', ...
            'YTickLabelRotation', ...
            'ZTick', ...
            'ZTickLabelRotation',...
            'TitleFontSizeMultiplier',...
            ... Color - related numerics            
            'AmbientLightColor',...
            'Color', ...
            'BackgroundColor', ...
            'ColorOrder', ...
            'GridColor', ...
            'MinorGridColor', ...
            'XColor', ...
            'YColor', ...
            'ZColor' ...
            }                         
        
    end
    
    properties(Access = 'protected')
        positionBehavior
    end
    
    methods
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %
        %  Constructor
        %
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        function this = WebUIAxesController( model, varargin  )

           % Super constructor           
           this = this@matlab.ui.internal.controller.WebCanvasContainerController( model, varargin{:} );
           this.positionBehavior = matlab.ui.internal.componentframework.services.optional.PositionBehaviorAddOn(this.PropertyManagementService);
           
        end
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %
        %  Method:      updateFontSize
        %
        %  Description: Custom method to set newFontSize.
        %
        %  Inputs :     this
        %  Outputs:     newFontSize struct-> on the Web Panel peernode
        %
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        function newFontSize = updateFontSize(this)
            newFontSize = '';
            % using try catch as this is special case for the charts
            % as charts does not have the FontUnits property which need to be
            % ignored, need to investigate and come up with better option of
            % using the WebPanelController for the charts
            try
                value = struct('FontSize', this.Model.FontSize, 'FontUnits', this.Model.FontUnits);
                newFontSize = value;
            catch e %#ok<NASGU>

            end
        end
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %
        %  Method:      updatePosition
        %
        %  Description: Method invoked when position changes. 
        %
        %  Inputs :     None.
        %  Outputs:     
        %
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        function newPosValue = updatePosition( obj )
            oneOriginPosValue = obj.Model.Position;
            newPosValue = obj.positionBehavior.updatePositionInPixels(oneOriginPosValue);
        end        
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %
        %  Method:      updateAxesVisible
        %
        %  Description: Custom method to set the Visible property on the
        %  contained Axes rather than set Visible on the whole component
        %  (as is the case with other UI components)
        %
        %  Inputs :     this
        %  Outputs:     newVisible state sent to the peer node.
        %
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        function newVisible = updateAxesVisible(this)
            newVisible = this.Model.Visible;
            this.Model.Axes.Visible = this.Model.Visible;
        end
    
    end
    
      methods( Access = 'protected' )

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %
    %  Method:      defineViewProperties
    %
    %  Description: Within the context of MVC ( Model-View-Controller )
    %               software paradigm, this is the method the "Controller"
    %               layer uses to define which properties will be consumed by
    %               the web-based user interface.
    %  Inputs:      None
    %  Outputs:     None
    %
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    function defineViewProperties( this )
        
        this.PropertyManagementService.defineViewProperty( 'Title' );        
        this.PropertyManagementService.defineViewProperty( 'BackgroundColor' );                
        this.PropertyManagementService.defineViewProperty( 'FontSize' );        
        
        this.PropertyManagementService.defineViewProperty( 'XTickLabel' );        
        this.PropertyManagementService.defineViewProperty( 'YTickLabel' );        
        this.PropertyManagementService.defineViewProperty( 'ZTickLabel' );   
      
        
        for idx = 1:length(this.GenericStringProperties)            
            this.PropertyManagementService.defineViewProperty(this.GenericStringProperties{idx});
        end
        
        for idx = 1:length(this.GenericNumericProperties)            
            this.PropertyManagementService.defineViewProperty(this.GenericNumericProperties{idx});
        end                
        
        defineViewProperties@matlab.ui.internal.controller.WebCanvasContainerController(this);
    end
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %
    %  Method:      defineRenamedProperties
    %
    %  Description: Within the context of MVC ( Model-View-Controller )
    %               software paradigm, this is the method the "Controller"
    %               layer uses to rename properties, which has been defined
    %               by the "Model" layer.
    %  Inputs:      None
    %  Outputs:     None
    %
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    function defineRenamedProperties( this )

       % Define renamed properties specific to the table, then call super
       this.PropertyManagementService.defineRenamedProperty( 'FontAngle_I',  'FontAngle');
       this.PropertyManagementService.defineRenamedProperty( 'FontName_I',  'FontName');
       this.PropertyManagementService.defineRenamedProperty( 'FontWeight_I',  'FontWeight');
       this.PropertyManagementService.defineRenamedProperty( 'FontSize_I',  'FontSize');
    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %
    %  Method:      definePropertyDependencies
    %  Description: Within the context of MVC ( Model-View-Controller )
    %               software paradigm, this is the method the "Controller"
    %               layer uses to establish property dependencies between
    %               a property (or set of properties) defined by the "Model"
    %               layer and dependent "View" layer property.
    %  Inputs:      None
    %  Outputs:     None
    %
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    function definePropertyDependencies( this )
        this.PropertyManagementService.definePropertyDependency('FontSize', 'FontSize');
        this.PropertyManagementService.definePropertyDependency('FontSize_I', 'FontSize');
    end
    
    function handleEvent( this, src, event )

        if( this.EventHandlingService.isClientEvent( event ) )
            
            eventStructure = this.EventHandlingService.getEventStructure( event );
            
            handled = false;
            switch ( eventStructure.Name )
                case 'positionChangedEvent'
                    handled = this.positionBehavior.handleClientPositionEvent( src, eventStructure, this.Model );
                case 'LimitsChanged'
                    xl = sort([eventStructure.xmin, eventStructure.xmax]);
                    yl = sort([eventStructure.ymin, eventStructure.ymax]);
                    is3D = ~is2D(this.Model.Axes);
                    if is3D
                        zl = sort([eventStructure.zmin, eventStructure.zmax]);
                    end
                    
                    try
                        if is3D
                            [xl,yl,zl] = UntransformLimits(this.Model.Axes.ActiveDataSpace,xl,yl,zl);
                            matlab.graphics.interaction.validateAndSetLimits(this.Model, xl, yl, zl);
                        else
                            [xl,yl,~] = UntransformLimits(this.Model.Axes.ActiveDataSpace,xl,yl,[0,1]);
                            matlab.graphics.interaction.validateAndSetLimits(this.Model, xl, yl);
                        end
                    catch
                        %TODO : Synchronization issue.
                    end
                    handled = true;
                case {'mousedown', 'mouseup', 'mousemove'}
                    uiAxesMouseEventData = matlab.graphics.interaction.uiaxes.UIAxesMouseEventData(this.Model.Axes, eventStructure);
                    notifyMouseEvent(this.Model, eventStructure.Name, uiAxesMouseEventData);
                    handled = true;
                case 'mousewheel'
                    uiAxesMouseEventData = matlab.graphics.interaction.uiaxes.UIAxesScrollEventData(this.Model.Axes, eventStructure, -eventStructure.wheelDelta);
                    notifyMouseEvent(this.Model, eventStructure.Name, uiAxesMouseEventData);
                    handled = true;
            end
            
            if (~handled)
                % Now, defer to the base class for common event processing
                handleEvent@matlab.ui.internal.controller.WebCanvasContainerController( this, src, event );
            end
        end
        
        function [xl,yl,zl] = UntransformLimits(ds,xlim,ylim,zlim)
            if ~strcmp(ds.isLinear,'on')
                iter = matlab.graphics.axis.dataspace.XYZPointsIterator( ...
                    'XData', xlim, ...
                    'YData', ylim, ...
                    'ZData', zlim);
                mat = makehgtform;
                data = ds.UntransformPoints(mat,iter);
                xl = sort([data(1), data(4)]);
                yl = sort([data(2), data(5)]);
                zl = sort([data(3), data(6)]);
            else
                xl = xlim;
                yl = ylim;
                zl = zlim;
            end
        end
    end
end
      
    methods
        function setInteraction(this, val)
            this.EventHandlingService.setProperty('Interaction', val);
        end
        
        function val = getInteraction(this)
            val = this.EventHandlingService.getProperty('Interaction');
        end    
    end
end

