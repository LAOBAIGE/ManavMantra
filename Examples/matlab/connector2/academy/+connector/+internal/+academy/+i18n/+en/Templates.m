classdef Templates
    
    properties (Constant)
        zeroth = 'zeroth';
        first = 'first';
        second = 'second';
        third = 'third';
        fourth = 'fourth';
        fifth = 'fifth';
        sixth = 'sixth';
        seventh = 'seventh';
        eighth = 'eighth';
        ninth = 'ninth';
        tenth = 'tenth';
        MINUS = 'subtraction operator';
        MUL = 'matrix multiplication operator';
        DIV = 'divide operator';
        LDIV = 'backslash operator';
        EXP = 'exponent operator';
        DOTMUL = 'dot multiply operator';
        DOTDIV = 'dot divide operator';
        DOTLDIV = 'dot backslash operator';
        DOTEXP = 'dot exponent operator';
        ANDAND = 'logical AND operator';
        OROR = 'logical OR operator';
        LT = 'less than operator';
        GT = 'greater than operator';
        LE = 'less than or equal to operator';
        GE = 'greater than or equal to operator';
        PLUS = 'addition operator';
        AND = 'logical AND operator';
        OR = 'logical OR operator';
        EQ = 'equality operator';
        NE = 'inequality operator';
        NOT = 'logical NOT operator';
        UMINUS = 'unary minus operator';
        UPLUS = 'unary plus operator';
        DOTTRANS = 'transpose operator';
        TRANS = 'transpose operator';
        AT = 'function handle operator';
        BANG = 'bang operator';
        syntaxError = 'Syntax error. ';
        correct = 'Correct! ';
        incorrect = 'Incorrect! ';
        example = 'Example: ';
        missingSingleQuotes = 'Use single quotes ('''') around the string <code>${1}</code> to treat it as a MATLAB character array. ';
        squareBracketForArrayAccess = 'If you are trying to use [] for accessing array elements, remember that MATLAB uses (). ';
        shouldCallAFunction = 'Your solution should use the <code>${1}</code> function. ';
        shouldNotCallAFunction = 'Your solution does not need to use the <code>${1}</code> function. ';
        shouldIndexIntoVariable = 'Your solution should index into the <code>${1}</code> variable. ';
        shouldNotIndexIntoVariable = 'Your solution does not need to index into the <code>${1}</code> variable. ';
        shouldUseVariable = 'Your solution should access the <code>${1}</code> variable. ';
        shouldNotUseVariable = 'Your solution does not need to access the <code>${1}</code> variable. ';
        shouldModifyVariable = 'Your solution should modify the <code>${1}</code> variable. ';
        shouldNotModifyVariable = 'Your solution does not need to modify the <code>${1}</code> variable. ';
        shouldExtractContentFrom = 'Your solution should use curly braces to extract contents from the <code>${1}</code> array. ';
        shouldNotExtractContentFrom = 'Your solution does not need to extract contents from the <code>${1}</code> array. ';
        shouldModifyContentWithin = 'Your solution should use curly braces to modify the content within the <code>${1}</code> array. ';
        shouldNotModifyContentWithin = 'Your solution should use curly braces to modify the content within the <code>${1}</code> array. ';
        functionCallShouldUseParentheses = 'The call to <code>${1}</code> should use parentheses <code>()</code> to pass the arguments. ';
        indexShouldUseParentheses = 'Try using parentheses <code>()</code> when indexing into <code>${1}</code>. ';
        indexShouldUseCurlyBraces = 'Try using curly braces <code>{}</code> when indexing into <code>${1}</code>. ';
        callShouldHaveDifferentNumberOfInputs = 'The call to the <code>${1}</code> function should contain ${2} input(s). ';
        indexShouldHaveDifferentNumberOfInputs = 'When indexing into <code>${1}</code>, consider using ${2} input(s). ';
        inputsAreIncorrect = 'The inputs to <code>${1}</code> are incorrect. ';
        inputWasExpectedToBeDifferent = 'The ${1} input was expected to have the value <code>${2}</code>. ';
        inputArgumentIsNotInCorrectSpot = '<code>${1}</code> was expected to be the ${2} input, not the ${3}. ';
        noNeedToObtainMultipleOutputArguments = 'Your solution does not need to obtain multiple outputs. ';
        shouldObtainMultipleOutputArguments = 'Try using square brackets (<code>[]</code>) to obtain multiple outputs. ';
        noNeedToManuallyCreateArray = 'Your solution does not need to manually create arrays with square brackets (<code>[]</code>). ';
        shouldManuallyCreateArray = 'Try using square brackets to manually enter an array (<code>[3 5 8]</code>) . ';
        noNeedToRemoveArrayElements = 'Your solution does not need to remove array elements (<code>... = []</code>). ';
        shouldRemoveArrayElements = 'Try removing array elements by making an assignment to the empty array (<code>... = []</code>). ';
        noNeedToCreateAnEmptyArray = 'Your solution does not need to create an empty array (<code>[]</code>). ';
        shouldCreateAnEmptyArray = 'Try using an empty array (<code>[]</code>) in your submission. ';
        noNeedToManuallyCreateCellArray = 'Your solution does not need to manually create cell arrays with curly braces (<code>{}</code>). ';
        shouldManuallyCreateCellArray = 'Try using curly braces to manually create a cell array (<code>{3 ''foo'' 8}</code>) . ';
        noNeedToCreateEmptyCellArray = 'Your solution does not need to create an empty cell array (<code>{}</code>). ';
        shouldCreateEmptyCellArray = 'Try using an empty cell array (<code>{}</code>) in your submission. ';
        incorrectUseOfMultipleOutputArgs = 'The output argument expression seems incorrect. ';
        incorrectUseOfManuallyCreatingArrays = 'The array being created using square brackets (<code>[]</code>) seems incorrect. ';
        incorrectUseOfRemovingArrayElements = 'There is an issue with the way array elements are being removed. ';
        incorrectUseOfCreatingEmptyArray = 'There is an issue with the way the empty array is created. ';
        incorrectUseOfManuallyCreatingCellArrays = 'The cell array being created using curly braces (<code>{}</code>) seems incorrect. ';
        incorrectUseOfCreatingEmptyCellArray = 'There is an issue with the way the empty cell array is created. ';
        expectedMRows = 'There were expected to be ${1} row(s). ';
        rowSeparationTip = 'Remember that you can use a semicolon (<code>;</code>) to separate rows. ';
        expectedNColumns = 'The ${1} row was expected to have ${2} columns. ';
        columnSeparationTip = 'Remember that you can use a comma (<code>,</code>) or space to separate columns. ';
        expectedDifferentRowArgument = 'The ${1} value of the ${2} row was expected to be <code>${3}</code>. ';
        switchedArgumentOrderInRow = 'In the ${1} row, <code>${2}</code> should be the ${3} argument. ';
        shouldNotUseColon = 'Your solution does not need to use the colon (<code>:</code>) operator. ';
        useColonToAccessAllElements = 'Try using the colon operator (<code>${1}</code>) to access all elements of an array. ';
        useColonToAccessAllRows = 'Try using the colon operator (<code>${1}</code>) to access all rows. ';
        useColonToAccessAllColumns = 'Try using the colon operator (<code>${1}</code>) to access all columns. ';
        useColonToAccessAllElementsOfADimension = 'Try using the colon operator (<code>${1}</code>) to access all elements of a particular dimension. ';
        useColonToCreateVector = 'Try using the colon operator (<code>${1}</code>) to create a vector. ';
        needToUseALoneColon = 'Use a single colon (<code>${1}</code>) within a subscript to select an entire row or column. ';
        needToSpecifyInitialAndFinalValue = 'The initial and final value of the vector should be specified in the colon (<code>${1}</code>) operator. ';
        badStartValueInColonExpression = 'The initial value of the vector should be <code>${1}</code>. ';
        badSpacingValueInColonExpression = 'The spacing of the vector should be <code>${1}</code>. ';
        badEndValueInColonExpression = 'The final value of the vector should be <code>${1}</code>. ';
        unnecessaryStatement = 'Your solution does not need to use a <code>${1}</code> statement. ';
        missingStatement = 'Use a <code>${1}</code> statement in your solution. ';
        noNeedToUseDotOperator = 'You do not need to use the dot operator (<code>a.b</code>) in your submission. ';
        shouldUseDotOperator = 'Try using the dot operator (<code>a.b</code>) in your submission. ';
        useDotOperatorOnVariable = 'Your solution should reference a field of the variable <code>${1}</code> (try using the dot operator).';
        checkVariableNameCapitalization = 'Check the variable name capitalization. ';
        useDotOperatorForField = 'Use the dot operator (<code>.</code>) to reference the property <code>${1}</code>. ';
        noAssignmentNecessary = 'Your solution does not need to assign the value to an output variable. ';
        shouldUseAssignment = 'Your solution should assign the value to <code>${1}</code>. ';
        valueAssignedIncorrect = 'The value being assigned is incorrect. ';
        wrongVariableInAssignment = 'Your solution should assign the value to <code>${1}</code>. ';
        switchedAssignmentOrder = 'The inputs of the assignment are switched. They should be <code>${1}</code>. ';
        valueBeingAssignedShouldBeOutput = 'The value being assigned ( <code>${1}</code> ) should be the output argument. ';
        outputShouldBeValueBeingAssigned = 'The output argument of the assignment ( <code>${1}</code> ) should instead be the value being assigned. ';
        anonymousFunction = 'anonymous function';
        anonymousFunctionUnnecessary = 'Your solution does not need to use an ${1}. ';
        tryUsingAnonymousFunction = 'Try using an ${1} in your solution. ';
        anonFunctionHasWrongNumInputs = 'The anonymous function was expected to contain ${1} inputs. ';
        noNeedToUseOperator = 'Your solution does not need to use the ${1} (<a target="_blank" href="${2}">${3}</a>). ';
        shouldUseOperator = 'Your solution should use the ${1} (<a target="_blank" href="${2}">${3}</a>). ';
        left = 'left';
        right = 'right';
        badOperatorArgument = 'The ${1} input to the ${2} was expected to be <code>${3}</code>. ';
        switchedBothOperatorArguments = 'The inputs to the ${1} are switched. They should be <code>${2}</code>. ';        
        switchedOneOperatorArgument = 'The ${1} input to the ${2} ( <code>${3}</code> ) should be the ${4} input. ';
        shouldUseInt = 'Your solution should contain an integer with the value <code>${1}</code>. ';
        noNeedToUseInt = 'Your solution does not need to contain an integer with the value <code>${1}</code>. ';
        shouldUseDouble = 'Your solution should contain a number with the value <code>${1}</code>. ';
        noNeedToUseDouble = 'Your solution does not need to contain a number with the value <code>${1}</code>. ';
        shouldUseString = 'Your solution should contain a character array with the value <code>${1}</code>. ';
        noNeedToUseString = 'Your solution does not need to contain a character array with the value <code>${1}</code>. ';
        shouldUseId = 'Your solution should contain a reference to the identifier <code>${1}</code>. ';
        noNeedToUseId = 'Your solution does not need to contain a reference to the identifier <code>${1}</code>. ';
        
        variableHasIncorrectDimensions = 'The variable <code>${1}</code> has incorrect dimensions. <br/>Expected size: [${2}] <br/>Actual size: [${3}]';
        variableHasIncorrectDataType = 'The variable <code>${1}</code> has incorrect datatype. <br/>Expected type: [${2}] <br/>Actual type: [${3}]'; 
        variableIsIncorrect = 'The variable <code>${1}</code> appears to be incorrect. ';
        checkCapitalizationOfCharacters = 'Check the case of each character in the string <code>${1}</code>. ';
        stateDesiredValue = 'The desired value of <code>${1}</code> is: ${2} <br/>The actual value is: ${3}';
        variableWasNotCreated = 'The variable <code>${1}</code> was not created. ';
        checkMisspelledVariableName = 'Check if you have misspelled the variable name <code>${1}</code>. ';
        scalarValueDifference = 'The value differs from the desired value by an amount on the order of <code>${1}</code>. ';
        nonscalarValueDifference = 'One or more elements differ the desired value by an amount on the order of <code>${1}</code>. ';
        missingStructField = 'The field <code>${1}</code> is missing from the structure. ';
        missingSeveralStructFields = 'These fields are missing from the structure: <code>${1}</code>. ';
        checkMisspelledFieldName = 'Check if you have misspelled the field name(s) ${1}. ';
        checkMisspelledFieldNameGeneric = 'Check if you misspelled any of the field names. ';
        checkFieldValue = 'Check the value of the field(s): ${1}';
        incorrectTableVariableOrder = 'The variables of the table are not in the correct order. ';
        tableVariableCapitalizationIssue = 'The table''s variable names are case sensitive. Check if the variable names have the proper case. ';
        checkTableVariableValues = 'Check the value of the following variables of the table: ${1}';
    end
    
end

