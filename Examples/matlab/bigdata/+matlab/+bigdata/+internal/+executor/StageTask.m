%StageTask
% A class that represents a collection of execution tasks that can be run
% simultaneously.
%
% Specifically, a collection of  execution tasks can be run simultaneously
% if they can run from start to finish without any communication between
% partitions, or requiring to buffer the entirety of a potentially large
% intermediate partition.
%
% Typically, the boundary of stages will be the points where data is
% written into either a shuffle-sort storage on disk or to a broadcast map.
%

%   Copyright 2016-2017 The MathWorks, Inc.

classdef (Sealed) StageTask < handle
    properties (SetAccess = immutable)
        % The strategy for partitioning the execution of this task.
        %
        % A data processor will be instantiated for each execution
        % partition.
        %
        % Note, this must be compatible with the partitioning of the inputs
        % to this task. This must match the output partition strategy for
        % every non-broadcast input task.
        ExecutionPartitionStrategy;
    end
    
    properties (SetAccess = private)
        % An array of CompositeDataProcessorBuilder instances that
        % collectively represent how to perform all the work to be done by
        % this task.
        DataProcessorFactories = matlab.bigdata.internal.executor.CompositeDataProcessorBuilder.empty();
        
        % An array of ExecutionTask instances that correspond to intermediate
        % data to be received by this stage task by shuffle-sort.
        InputShuffles = matlab.bigdata.internal.executor.ExecutionTask.empty();
        
        % An array of ExecutionTask instances that correspond to intermediate
        % data that will be sent by this stage task by shuffle-sort.
        OutputShuffles = matlab.bigdata.internal.executor.ExecutionTask.empty();
        
        % An array of ExecutionTask instances that correspond to broadcast
        % data to be received by this stage task.
        InputBroadcasts = matlab.bigdata.internal.executor.ExecutionTask.empty();
        
        % An array of ExecutionTask instances that correspond to broadcast
        % data that is generated by this stage task.
        OutputBroadcasts = matlab.bigdata.internal.executor.ExecutionTask.empty();
        
        % An array of ExecutionTask instances that correspond to the tasks
        % whose outputs are streamed to the client.
        OutputStreams = matlab.bigdata.internal.executor.ExecutionTask.empty();
        
        % An array of CacheEntryKey instances that correspond to the cache
        % entries that this stage task will generate or consume.
        CacheEntryKeys = matlab.bigdata.internal.executor.CacheEntryKey.empty();
    end
    
    properties (Dependent)
        % A scalar DataProcessor factory that is equivalent to
        % instantiating all of DataProcessorFactories and merging the
        % DataProcessor instances into one.
        DataProcessorFactory;
    end
    
    methods
        function obj = StageTask(executionPartitionStrategy)
            % Construct an empty StageTask.
            obj.ExecutionPartitionStrategy = executionPartitionStrategy;
        end
        
        function obj = addExecution(obj, compositeDataProcessorBuilder)
            % Add a piece of execution to the StageTask.
            obj.DataProcessorFactories(end + 1, :) = compositeDataProcessorBuilder;
        end
        
        function obj = addDependencies(obj, inputDependencies)
            % Add a collection of communication dependencies to this
            % StageTask. These input dependencies must be the output of the
            % various create dependency static methods.
            obj = combine([obj; inputDependencies(:)], obj.ExecutionPartitionStrategy);
        end
        
        function obj = addBroadcastOutput(obj, task)
            % Specify that execution will add the output of the given task
            % to the broadcast map.
            obj.OutputBroadcasts(end + 1, :) = task;
        end
        
        function obj = addShuffleOutput(obj, task)
            % Specified that the underlying execution will send the output
            % of the given task to the shuffle communication mechanisms.
            obj.OutputShuffles(end + 1, :) = task;
        end
        
        function obj = addStreamOutput(obj, task)
            % Specified that the underlying execution will send the output
            % of the given task to the stream to client communication
            % mechanisms.
            obj.OutputStreams(end + 1, :) = task;
        end
        
        % Combine an array of StageTask instances into a single StageTask
        % that represents the collection.
        function obj = combine(objs, newExecutionPartitionStrategy)
            import matlab.bigdata.internal.executor.CacheEntryKey;
            import matlab.bigdata.internal.executor.CompositeDataProcessorBuilder;
            import matlab.bigdata.internal.executor.ExecutionTask;
            import matlab.bigdata.internal.executor.StageTask;
            
            obj = StageTask(newExecutionPartitionStrategy);
            obj.DataProcessorFactories = vertcat(objs.DataProcessorFactories, CompositeDataProcessorBuilder.empty());
            obj.InputShuffles = unique(vertcat(objs.InputShuffles, ExecutionTask.empty()));
            obj.OutputShuffles = unique(vertcat(objs.OutputShuffles, ExecutionTask.empty()));
            obj.InputBroadcasts = unique(vertcat(objs.InputBroadcasts, ExecutionTask.empty()));
            obj.OutputBroadcasts = unique(vertcat(objs.OutputBroadcasts, ExecutionTask.empty()));
            obj.OutputStreams = unique(vertcat(objs.OutputStreams, ExecutionTask.empty()));
            obj.CacheEntryKeys =  unique(vertcat(objs.CacheEntryKeys, CacheEntryKey.empty()));
        end
        
        function value = get.DataProcessorFactory(obj)
            value = iCombineFactories(obj.DataProcessorFactories);
        end
    end
    
    methods (Static)
        function obj = createBroadcastDependency(task)
            % Create an object that represents a broadcast communication
            % dependency to the output of the given task. This object will
            % be added to any StageTask that depends on receiving the
            % output of the given task via broadcast mechanisms.
            import matlab.bigdata.internal.executor.StageTask;
            obj = StageTask(task.OutputPartitionStrategy);
            obj.InputBroadcasts = task;
        end
        function obj = createShuffleDependency(task)
            % Create an object that represents a shuffle communication
            % dependency to the output of the given task. This object will
            % be added to any StageTask that depends receiving the output
            % of the given task via shuffle mechanisms.
            import matlab.bigdata.internal.executor.StageTask;
            obj = StageTask(task.OutputPartitionStrategy);
            obj.InputShuffles = task;
        end
        function obj = createCacheDependency(task)
            % Create an object that represents a cache communication
            % dependency to the output of the given task. This object will
            % be added to any StageTask that will generate or consume any
            % cache of the output of the given task.
            import matlab.bigdata.internal.executor.StageTask;
            obj = StageTask(task.ExecutionPartitionStrategy);
            obj.CacheEntryKeys = task.CacheEntryKey;
        end
    end
end

% Helper function that combines together an array of CompositeDataProcessorBuilder
function dataProcessorFactory = iCombineFactories(nodes)
import matlab.bigdata.internal.executor.CompositeDataProcessorBuilder;
import matlab.bigdata.internal.executor.TerminalProcessor;
dataProcessorFactory = CompositeDataProcessorBuilder(...
    nodes, TerminalProcessor.createFactory(numel(nodes)));
end
