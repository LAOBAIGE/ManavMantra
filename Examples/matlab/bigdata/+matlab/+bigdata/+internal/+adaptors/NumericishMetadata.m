%NumericishMetadata Metadata for numeric-style arrays

%   Copyright 2016 The MathWorks, Inc.

classdef NumericishMetadata < matlab.bigdata.internal.adaptors.AbstractArrayMetadata
    methods
        function obj = NumericishMetadata(tallSz)
            metadataFields = {'Min1OmitNaN'; ...
                              'Min1IncludeNaN'; ...
                              'Max1OmitNaN'; ...
                              'Max1IncludeNaN'; ...
                              'NumNaN'; ...
                              'NumInf'; ...
                              'SmallestPositiveValue'; ...
                              'LargestPositiveValue'; ...
                              'SmallestNegativeValue'; ...
                              'LargestNegativeValue'};
            
            aggregateFcns = {@(data) iMinMaxDim1(@min, data, 'omitnan'); ...
                             @(data) iMinMaxDim1(@min, data, 'includenan'); ...
                             @(data) iMinMaxDim1(@max, data, 'omitnan'); ...
                             @(data) iMinMaxDim1(@max, data, 'includenan'); ...
                             @(data) nnz(isnan(data)); ...
                             @(data) nnz(isinf(data)); ...
                             @(data) iExtreme(@min, @(x) x > 0, data); ...
                             @(data) iExtreme(@max, @(x) x > 0, data); ...
                             @(data) iExtreme(@min, @(x) x < 0, data); ...
                             @(data) iExtreme(@max, @(x) x < 0, data)};
            
            % In most cases, the reduction function is the same as the aggregation
            % function...
            reduceFcns = aggregateFcns;
            % ... except for NumNaN and NumInf.
            reduceFcns(5:6) = {@sum};
            
            obj@matlab.bigdata.internal.adaptors.AbstractArrayMetadata(...
                tallSz, metadataFields, aggregateFcns, reduceFcns);
        end
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Compute min/max in first dimension
function val = iMinMaxDim1(fcn, data, flag)
    val = fcn(data, [], 1, flag);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Compute min/max for data either less
function val = iExtreme(minMaxFcn, predicateFcn, data)
    data = reshape(data(predicateFcn(data)), [], 1);
    if isempty(data)
        val = zeros(0, 'like', data);
    else
        val = minMaxFcn(data, [], 1, 'omitnan');
    end
end
