classdef (Abstract) PeerNode < handle
    % Peer Node Super Class.
    %
    % See also peermodel.internal.PeerNodeClientMode, peermodel.internal.PeerNodeServerMode
    
    % Author(s): Rong Chen
    % Copyright 2012-2018 The MathWorks, Inc.
    % $Revision: 1.1.4.1 $ $Date: 2014/03/26 02:40:44 $
    
    properties (SetAccess = protected, Hidden)
        % Java PeerNode object
        Peer
    end
    
    properties (SetAccess = protected)
        % Property "Id": 
        %
        %   Unique peer node Id that is automatically generated by system.
        %
        Id
        % Property "Type": 
        %
        %   Peer node type.
        %
        Type
    end
    
    properties (Dependent, SetAccess = protected)
        % Property "Parent": 
        %
        %   The parent peer node.  Returns [] if the peer node does not
        %   have a parent.
        %
        %   Example:
        %       mgr = PeerModelManagerServerMode('MyChannel');
        %       root = mgr.createRoot('MyType');
        %       node = root.addChild('type')
        %       node.Parent % returns the root object
        Parent
        % Property "Children": 
        %
        %   The child peer nodes.  Returns [] if the peer node does not
        %   have any children.
        %
        %   Example:
        %       mgr = PeerModelManagerServerMode('MyChannel');
        %       root = mgr.createRoot('MyType');
        %       node = root.addChild('type')
        %       root.Children % returns the node object
        Children
    end

    events
        % Event sent when any property is changed
        PropertySet
        % Event sent when any property is changed
        PropertyDeleted
        % Event sent.
        PeerEvent
    end
    
    properties (Access = protected)
        % Listener to Java PropertySet event
        PropertySetListener
        % Listener to Java PropertySet event
        PropertyDeletedListener
        % Listener to Java PeerEvent event
        PeerEventListener
    end
    
    methods
       
        
        %% Public API - Parent and Children
        function value = get.Parent(this)
            parent = this.Peer.getParent;
            if isempty(parent)
                value = [];
            else
                id = char(parent.getId());
                value = peermodel.internal.PeerModelManagers.getNodeById(id);
            end
        end
       
        function value = get.Children(this)
            num = this.Peer.getNumberOfChildren();
            if num == 0
                value = [];
            else
                for ct=1:num
                    node = this.Peer.getChild(ct-1);
                    id = char(node.getId());
                    value(ct) = peermodel.internal.PeerModelManagers.getNodeById(id); %#ok<*AGROW>
                end
            end
        end
        
        %% Public API - Property
        function value = getProperty(this, property)
            % Get a property of peer node
            %   value = node.getProperty('foo');
            % Method returns [] if the property name does not exists
            value = this.Peer.getProperty(property);
        end
        
        function setProperty(this, property, value)
            % Set a property of peer node
            %   node.setProperty(prop, value);
            javavalue = peermodel.internal.Utility.convertValueFromMatlabToJava(value);
            this.Peer.setProperty(property, javavalue);
        end
        
        function value = hasProperty(this, property)
            % Check whether a property exists in the peer node
            %   existed = node.hasProperty(prop);
            value = this.Peer.hasProperty(property);
        end
        
        function removeProperty(this, property)
            % Remove a property from peer node
            %   node.removeProperty(prop);
            this.Peer.unsetProperty(property);
        end
        
        %% Public API - Properties
        function value = getProperties(this)
            % Get all the properties of the peer node
            %   value = node.getProperties();
            % Method returns a structure
            hashmap = this.Peer.getProperties();
            value = peermodel.internal.Utility.convertJavaMapToStruct(hashmap);
        end
        
        function setProperties(this, varargin)
            % Set multiple properties of peer node
            %   node.setProperties(structure);
            %   node.setProperties(prop1, value1, prop2, value2, ...);
            ni = nargin - 1;
            if ni == 1
                % structure;
                structure = varargin{1};
            else
                % PV pair;
                if rem(ni, 2)~=0,
                    error('Use name/value pairs to specify property values.')
                end
                for ct=1:2:(ni-1)
                    if ~ischar(varargin{ct})
                        error('Property name must be a string.')
                    end
                end
                structure = struct(varargin{:});
            end
            hashmap = peermodel.internal.Utility.convertStructToJavaMap(structure);
            this.Peer.setProperties(hashmap);
        end
        
        function removeProperties(this, properties)
            % Remove properties from peer node
            %   node.removeProperties({'foo','bar'});
            javaproperties = peermodel.internal.Utility.convertValueFromMatlabToJava(properties);
            this.Peer.unsetProperties(javaproperties);
        end
        
        function replaceAllProperties(this, varargin)
            % Remove all the properties from and add new ones to peer node
            %   node.replaceAllProperties(structure);
            %   node.replaceAllProperties(prop1, value1, prop2, value2, ...);
            ni = nargin - 1;
            if ni == 1
                % structure;
                structure = varargin{1};
            else
                % PV pair;
                if rem(ni, 2)~=0,
                    error('Use name/value pairs to specify property values.')
                end
                for ct=1:2:(ni-1)
                    if ~ischar(varargin{ct})
                        error('Property name must be a string.')
                    end
                end
                structure = struct(varargin{:});
            end
            hashmap = peermodel.internal.Utility.convertStructToJavaMap(structure);
            this.Peer.replaceProperties(hashmap);
        end
        
        %% Public API - Descendant
        function value = hasDescendant(this, id)
            % Check whether a peer node is a descendant based on its id
            %   existed = node.hasDescendant(id);
            value = this.Peer.hasDescendant(id);
        end
    
        function value = getDescendant(~, id)
            % Get a peer node as a descendant based on its id
            %   descendant = node.getDescendant(id);
            value = peermodel.internal.PeerModelManagers.getNodeById(id);
        end
        
        %% Public API - Descendant
        function value = isDetached(this)
            % Check whether the peer node is detached from its parent
            %   detached = node.isDetached();
            value = this.Peer.isDetached();
        end
        
        function value = isAncestorDetached(this)
            % Check whether any of ancestor is detached from its parent
            %   detached = node.isAncestorDetached();
            value = this.Peer.isAncestorDetached();
        end
        
        function value = hasDetachedChildren(this)
            % Check whether a peer node has any detached children
            %   detached = node.hasDetachedChildren();
            value = this.Peer.hasDetachedChildren();
        end
    
        function nodes = getDetachedChildren(this)
            % Get all the detached children
            %   detached = node.getDetachedChildren();
            list = this.Peer.getDetachedChildren();
            keys = {};
            for ct=1:size(list)
                peer = list.get(ct-1);
                keys{ct} = char(peer.getId());
            end
            if isempty(keys)
                nodes = [];
            else
                for ct=1:length(keys)
                    nodes(ct) = peermodel.internal.PeerModelManagers.getNodeById(keys{ct});
                end
            end
        end
        
        %% Public API - Peer Event
        function dispatchEvent(this, structure)
            % Dispatch peer event from server to client
            %   node.dispatchEvent(structure);
            % "structure" contains event data to be sent over
            props = java.util.HashMap;
            names = fieldnames(structure);
            for ct=1:length(names)
                props.put(names{ct}, structure.(names{ct}));
            end
            this.Peer.dispatchEvent('peerEvent',this.Peer,props);
        end     
            
    end
    
    methods (Access = protected)

        function addListeners(this)
            this.PropertySetListener = addlistener(this.Peer, 'propertySet', @(event, data) PropertySetCallback(this, event, data));
            this.PropertyDeletedListener = addlistener(this.Peer, 'propertyUnset', @(event, data) PropertyDeletedCallback(this, event, data));
            this.PeerEventListener = addlistener(this.Peer, 'peerEvent', @(event, data) PeerEventCallback(this, event, data));
        end 
        
        % Making these methods protected. (g1661932)
        
        function PropertySetCallback(this,src,data) %#ok<*INUSL>           
            eventdata = peermodel.internal.Utility.processPeerEventData(data);
            this.notify('PropertySet', eventdata);
        end
        
        function PeerEventCallback(this,src,data)
            eventdata = peermodel.internal.Utility.processPeerEventData(data);
            this.notify('PeerEvent', eventdata);
        end
        
        function PropertyDeletedCallback(this,src,data)
            eventdata = peermodel.internal.Utility.processPeerEventData(data);
            this.notify('PropertyDeleted', eventdata);
        end            
    end    
end

