classdef PeerInspectorManager < internal.matlab.inspector.Inspector & ...
        internal.matlab.variableeditor.peer.PeerManager
    
    % This class is unsupported and might change or be removed without
    % notice in a future version.
    
    % Peer Inspector Manager class, extends the Inspector and Peer Manager
    % classes
    
    % Copyright 2015-2017 The MathWorks, Inc.
    
    properties(Access = private)
        % Unique ID of the object currently being inspected
        objID;
    end
    
    methods
        % Constructor, creates a PeerInspectorManager for the application
        % and channel
        function this = PeerInspectorManager(Application, Channel)
            this@internal.matlab.variableeditor.peer.PeerManager(...
                Channel, '/Inspector_Root', false);
            this@internal.matlab.inspector.Inspector(Application, Channel);
        end
        
        function veVar = getVariableAdapter(this, name, ws, varClass, ...
                varSize, data)
            % Returns a PeerInspectorAdapter class for the object being
            % inspected
            veVar = this.getVariableAdapter@internal.matlab.inspector.Inspector(...
                name, ws, varClass, varSize, data);
            if ~isa(veVar, 'internal.matlab.inspector.peer.PeerInspectorAdapter')
                this.Adapter = internal.matlab.inspector.peer.PeerInspectorAdapter(...
                    veVar.DataModel.Name, veVar.DataModel.Workspace, ...
                    veVar.DataModel, veVar.ViewModel);
                veVar = this.Adapter;
            end
        end
        
        function handlePeerEvent(this, ~, ed)
            % Handles peer events coming from the client
            if isfield(ed.EventData, 'source') && ...
                    strcmp('server', ed.EventData.source)
                % Ignore any events generated by the server
                return;
            end
            if isfield(ed.EventData, 'type')
                % Determine the object name, server eval function,
                % class name and workspaceID, if they are set.
                [objectName, serverEvalFcn, className, workspaceID] = ...
                    this.getDataFromEvent(ed.EventData);

                try
                    switch ed.EventData.type
                        case 'inspect'
                            % Called to inspect an object.  Need to look
                            % through the properties to see how the object
                            % is being specified.
                            if ~isempty(workspaceID)
                                workspace = this.getWorkspace(workspaceID);
                            else
                                workspace = 'caller';
                            end
                            
                            % Set the objID used for the object
                            % currently being inspected
                            this.objID = this.getUniqueID(workspaceID, ...
                                serverEvalFcn);
                            %disp(['Key: ' this.objID])
                            
                            if ~ischar(workspace) || ...
                                    strcmp(workspace, 'base')
                                % Attemp to get a handle
                                obj = [];
                                if ~isempty(objectName)
                                    obj = evalin(workspace, objectName);
                                elseif ~isempty(serverEvalFcn)
                                    obj = evalin(workspace, serverEvalFcn);
                                elseif ~isempty(className)
                                    obj = evalin(workspace, className);
                                end
                                
                                if ~isempty(obj)
                                    this.inspect(obj);
                                end
                            else
                                if isempty(objectName)
                                    if ~isempty(serverEvalFcn)
                                        objectName = serverEvalFcn;
                                    elseif ~isempty(className)
                                        objectName = className;
                                    end
                                end
                                this.showInspector(objectName);
                            end
                            
                        case 'undo'
                            % Get the UndoQueue for this object
                            undoQueue = this.getUndoRedoQueueForObject(...
                                workspaceID, serverEvalFcn);
                            
                            % Perform the Undo
                            undoQueue.undo();

                        case 'redo'
                            % Get the UndoQueue for this object
                            undoQueue = this.getUndoRedoQueueForObject(...
                                workspaceID, serverEvalFcn);
                            
                            
                            % Perform the Redo
                            undoQueue.redo();

                        case 'updateObjectPropertyValue'
                            % Called to update an object's property value.
                            % Excpects the object name, property and value
                            % to set.  The value is set asynchonously via
                            % Java.
                            
                            objectName = [];
                            serverEvalFcn = [];
                            className = [];
                            property = '';
                            value = [];

                            if isfield(ed.EventData, 'objectName')
                                % Object name is set
                                objectName = ed.EventData.objectName;
                            end
                            
                            if isfield(ed.EventData, 'property')
                                % Property name is set
                                property = ed.EventData.property;
                            end
                            
                            if isfield(ed.EventData, 'value')
                                % Value is set
                                value = ed.EventData.value;
                            end
                            
                            if isfield(ed.EventData, 'className')
                                % Application class name is specified
                                className = ed.EventData.className;
                            end
                            
                            if ~isempty(workspaceID)
                                workspace = this.getWorkspace(workspaceID);
                            else
                                workspace = 'caller';
                            end
                            
                            if ~ischar(workspace) || ...
                                    strcmp(workspace, 'base')
                                % Attemp to get a handle
                                obj = [];
                                if ~isempty(objectName)
                                    obj = evalin(workspace, objectName);
                                elseif ~isempty(serverEvalFcn)
                                    obj = evalin(workspace, serverEvalFcn);
                                elseif ~isempty(className)
                                    obj = evalin(workspace, className);
                                end
                                
                                if ~isempty(obj)
                                    this.setOfflinePropertyValue(obj, property, value);
                                end
                            else
                                if isempty(objectName)
                                    if ~isempty(serverEvalFcn)
                                        objectName = serverEvalFcn;
                                    elseif ~isempty(className)
                                        objectName = className;
                                    end
                                end
                                
                                % Called to show the Property Inspector for the given object
                                cmd = sprintf(...
                                    'setOfflinePropertyValue(internal.matlab.inspector.peer.InspectorFactory.createInspector(''%s'',''%s''), %s, ''%s'', ''%s'');', ...
                                    this.Application, this.InspectorID, objectName, property, regexprep(value, '['']{1,1}',''''''));
                                this.executeCommand(cmd);
                            end
                        otherwise
                            this.handlePeerEvent@internal.matlab.variableeditor.peer.PeerManager([], ed);
                    end
                catch e
                    this.sendErrorMessage(e.message);
                end
            end
        end
        
        % Called to inspect an object or array of objects.  If the
        % workspace is not provided, it defaults to caller.  name is
        % optional, and is required only for non-handle (value) objets.
        % Returns the Document if an output argument is specified.
        function varargout = inspect(this, objects, ...
                multiplePropertyCombinationMode, ...
                multipleValueCombinationMode, ws, name)
            
            if nargin < 2 || isempty(objects)
                objects = internal.matlab.inspector.EmptyObject;
            end
            
            % Setup MultiplePropertyCombinationMode
            if nargin < 3 || isempty(multiplePropertyCombinationMode)
                multiplePropertyCombinationMode = '';
            end
            
            % Setup MultipleValueCombinationMode
            if nargin < 4 || isempty(multipleValueCombinationMode)
                multipleValueCombinationMode = '';
            end
            
            if nargin < 5 || isempty(ws)
                ws = '';
            end
            
            if nargin < 6 || isempty(name)
                name = '';
            end
            
            if ~isa(objects, 'internal.matlab.inspector.InspectorProxyMixin')
                className = class(objects);
                proxyViewClass = internal.matlab.inspector.peer.InspectorFactory.getInspectorView(className, this.Application);
                if ~isempty(proxyViewClass)
                    objs = eval([proxyViewClass '(objects)']);
                else
                    objs = objects;
                end
            else 
                objs = objects;
            end
            
            % Delete the old ProxyMixin object before inspecting a new object
            if ~isempty(this.Documents) && ~isempty(this.Documents.DataModel.getData) ...
                    && isa(this.Documents.DataModel.getData, 'internal.matlab.inspector.InspectorProxyMixin')
                delete(this.Documents.DataModel.getData);
            end
            peerInspectorDocument = this.inspect@internal.matlab.inspector.Inspector(objs, ...
                multiplePropertyCombinationMode, ...
                multipleValueCombinationMode, ws, name);

            % Retrieve the UndoQueue associated with this object, and
            % set it on the ViewModel.  It will be created by the
            % UndoService if it hasn't been created yet.
            if isempty(this.objID) || isequal(this.objID, 'base')
                this.objID = this.getUniqueID(ws, []);
            end
            uniqueID = this.objID;
            undoService = internal.matlab.inspector.InspectorUndoService.getInstance;
            undoQueue = undoService.getUndoQueue(uniqueID);
            peerInspectorDocument.ViewModel.UndoQueue = undoQueue;
            varargout{1} = peerInspectorDocument;
        end

        function setOfflinePropertyValue(this, objects, property, value)
            % Called to set the offline property value of an object.
            if nargin < 2 || isempty(objects)
                objects = internal.matlab.inspector.EmptyObject;
            end
            
            try
                className = class(objects);
                proxyViewClass = internal.matlab.inspector.peer.InspectorFactory.getInspectorView(className, this.Application);
                oldValue = [];
                hasProxy = false;
                if ~isempty(proxyViewClass)
                    objs = eval([proxyViewClass '(objects)']);
                    hasProxy = true;
                else
                    objs = objects;
                end
                
                m = metaclass(objs);
                p = m.PropertyList(strcmp(property, {m.PropertyList.Name}));
                dataType = p.Type.Name;
                                
                isEnumeration = false;
                if isobject(objs.(property))
                    [~, values] = enumeration(objs.(property));
                    isEnumeration = ~isempty(values);
                elseif isa(p.Type, 'meta.EnumeratedType')
                    isEnumeration = true;
                end
                
                % Need to get the value from the client-side JSON string
                s = mls.internal.fromJSON(value);
                value = s.value;

                widgetRegistry = internal.matlab.variableeditor.peer.WidgetRegistry.getInstance;
                if ~isempty(this.Documents)
                    widgets = widgetRegistry.getWidgets(class(this.Documents.ViewModel), dataType);
                else
                    widgets = widgetRegistry.getWidgets('internal.matlab.inspector.peer.PeerInspectorViewModel', dataType);
                end
                
                if ~isempty(widgets)
                    if (isa(dataType, 'meta.EnumeratedType') || ...
                            iscategorical(objs.(property)) || ...
                            isEnumeration)
                        if ~isempty(this.Documents)
                            widgets = widgetRegistry.getWidgets(class(this.Documents.ViewModel), 'categorical');
                        else
                            widgets = widgetRegistry.getWidgets('internal.matlab.inspector.peer.PeerInspectorViewModel', 'categorical');
                        end
                    end
                end
                
                % The following sections are similar to
                % PeerInspectorViewModel.  This will be refactored to use a
                % common method.
                if ~isempty(widgets) && ~isempty(widgets.EditorConverter)
                    converter = eval(widgets.EditorConverter);
                    converter.setClientValue(value);
                    value = converter.getServerValue();
                    if ~ischar(value)
                        value = mat2str(value);
                    else
                        isCellText = startsWith(value, '{') && endsWith(value, '}');
                        hasSingleQuotes = startsWith(value, '''') && endsWith(value, '''');
                        if ~isCellText && ~hasSingleQuotes
                            value = mat2str(value);
                        end
                    end
                end
                
                if isEnumeration && ischar(value)
                    value = strrep(value, '''', '');
                    L = lasterror; %#ok<*LERR>
                    try
                        % Try to convert to actual enumeration if possible,
                        % but if not, just use the string representation
                        value = eval([dataType '.' value]);
                    catch
                    end
                    lasterror(L);
                end
                
                if hasProxy
                    set(objs, property, value);
                else
                    objs.(property) = value;
                end
                
                this.getRoot().dispatchEvent(struct(...
                    'type', 'dataChangeStatus', ...
                    'source', 'server', ...
                    'property', property, ...
                    'oldValue', oldValue, ...
                    'newValue', value, ...
                    'status', 'success'));
            catch e
                this.getRoot().dispatchEvent(struct(...
                    'type', 'dataChangeStatus', ...
                    'source', 'server', ...
                    'property', property, ...
                    'oldValue', oldValue, ...
                    'newValue', value, ...
                    'status', 'error', ...
                    'message', e.message));
                this.sendErrorMessage(e.message);
            end
        end
    end
    
    methods(Access = protected)
        function showInspector(this, objectName)
            % Called to show the Property Inspector for the given object
            cmd = sprintf(...
                'inspect(internal.matlab.inspector.peer.InspectorFactory.createInspector(''%s'',''%s''), %s);', ...
                this.Application, this.InspectorID, objectName);
            this.executeCommand(cmd);
        end
        
        function executeCommand(~, cmd)
            % Called to asynchronously execute a command in the base
            % workspace, using the Java WebWorker
            com.mathworks.datatools.variableeditor.web.WebWorker.executeCommand(cmd);
        end
        
        function varDocument = addDocument(this, veVar, userContext)
            % Overrides the MLManager addDocument method in order to
            % create a PeerInspectorDocument
            varDocument = [];
            if ~isempty(veVar)
                docID = this.getNextDocID(veVar);
                varDocument = docID;                
                this.DelayedDocumentList = [this.DelayedDocumentList struct('docID', docID, 'veVar', veVar, 'userContext', userContext)];
            end
        end
        
        function varDocument = createDocument(this, veVar, userContext, docID)
            root = this.getRoot();
            varDocument = ...
                internal.matlab.inspector.peer.PeerInspectorDocument(...
                root, this, veVar, userContext, docID);
            varDocument.IgnoreUpdates = this.IgnoreUpdates;
            varDocument.DataModel.IgnoreUpdates = this.IgnoreUpdates;

            if this.IgnoreUpdates
                varDocument.Name = ...
                    varDocument.PeerNode.getProperty('docID');
            end

            this.Documents = [this.Documents varDocument];
        end
        
        % Initialize the object name, server eval function, class name
        % and workspace ID from the information in the eventData.
        % eventData is a struct which may contain fields for the
        % values.
        function [objectName, serverEvalFcn, className, workspaceID] = getDataFromEvent(~, eventData)
            objectName = [];
            serverEvalFcn = [];
            className = [];
            workspaceID = [];

            if isfield(eventData, 'objectName')
                % Object name is set
                objectName = eventData.objectName;
            end
            
            if isfield(eventData, 'workspaceID')
                % Object workspaceID is specified.  This can be a
                % workspace name ('base', for example), or an ID to a
                % MLWorkspace workspace-like object.
                workspaceID = eventData.workspaceID;
            end
            
            if isfield(eventData, 'className')
                % Application class name is specified
                className = eventData.className;
            end
            
            if isfield(eventData, 'serverEvalFcn')
                % Server eval function is specified.  This allows the
                % client to pass a function to evaluate on the server
                % to get the object to inspect
                serverEvalFcn = eventData.serverEvalFcn;
            end
        end

        % Returns a unique ID for an object, based on its workspace
        % ID, server eval function, Application name, and Inspector ID.
        % This ID will be used within the undo/redo service.  The
        % workspaceID and serverEvalFcn will be used, if they are set.
        % Otherwise, the Inspector Applicatio name and ID will be used.
        function id = getUniqueID(this, workspaceID, serverEvalFcn)
            id = "";
            
            % If it is set, use the serverEvalFcn
            if ~isempty(serverEvalFcn)
                id = id + serverEvalFcn;
            end
            
            % If it is set, also use the workspaceID
            if ~isempty(workspaceID)
                id = id + workspaceID;
            end

            % If we have no ID yet, add in the Application and inspector ID
            if strlength(id) == 0
                id = id + this.Application + this.InspectorID;
            end
            
            % Return a char, as the ID is used as a key in a map
            id = char(id);
        end
        
        % Finds the UndoQueue for the given object, using the
        % UndoService
        function undoQueue= getUndoRedoQueueForObject(this, workspaceID, ...
                serverEvalFcn)
            % Determine the unique ID for this object
            uniqueID = this.getUniqueID(workspaceID, serverEvalFcn);
            %disp(['Key: ' uniqueID])

            % Get its UndoQueue from the UndoService
            undoService = internal.matlab.inspector.InspectorUndoService.getInstance;
            undoQueue = undoService.getUndoQueue(uniqueID);
        end
    end
end
