%% Copyright 2013-2014 The MathWorks, Inc.
%%
%% WSDLENUM.MTL
%%    Template for matlab.wsdl.createClient, for a class definition of an enum type 
%%    declared in the WSDL.
%% Lines beginning with %% don't appear in the generated output for this template
%% This MATLAB class is a wrapper for the Java class of the same name
%% CLASSNAME           -- The MATLAB/Java class name
%% PKGNAME             -- This package name
%% JAVAPKGNAME         -- The Java package name
%% TYPE                -- the MATLAB and XML type, if different
%% VALUES              -- Allowed values of the fields: abc,def,25,...
%% H1DOC               -- H1 line
%% DOCUMENTATION       -- Docs on the values, one per line
%% DATETIME            -- Now
%% NAMES               -- Comma-separated list of MATLAB class names (services) this supports
%% SERVICES            -- Same, but with ? in front of each name, except the 1st
%% CLASSES             -- comma-separated list of other classes in this package:
%%                            ,?pkg.class1,?pkg.class2,...
%% GETTERHELP          -- help on convenience method to create one of these
classdef $CLASSNAME$ < matlab.wsdl.internal.WsdlObject
    % $CLASSNAME$(VALUE)  $H1DOC$
    %    VALUE is a $TYPE$ with one of the following values:
$DOCUMENTATION$    
    % 
    % $GETTERHELP$
    %
    % See also $NAMES$.
    
    % This file generated by matlab.wsdl.createWSDLClient at $DATETIME$
    % from $WSDL$.  
    % Please do not alter this file.

    properties
        Value; % the MATLAB value
    end
    
    methods
        function obj = $CLASSNAME$(value)
        % Create a $CLASSNAME$ containing the specified value
            obj.Value = value;
        end

        function obj = set.Value(obj, value)
            try
                import matlab.wsdl.internal.fromMATLAB
                % The following just validates the value
                $JAVAPKGNAME$.$CLASSNAME$.fromValue(...
                    fromMATLAB({'$CLASSNAME$','value'},value,'$TYPE$',false));
                obj.Value = value;
            catch e
                if isa(e.ExceptionObject,'java.lang.IllegalArgumentException')
                    error(message('MATLAB:webservices:IllegalArgument','$VALUES$'));
                end
            end
        end            
 
        function res = get.Value(obj)
            res = obj.Value;
        end
     end

    methods (Hidden, Access = protected)
        function jobj = getOneObj(obj)
        % Return the Java object corresponding to this object.  Intended
        % to be invoked from superclass.
            import matlab.wsdl.internal.fromMATLAB
            jobj = $JAVAPKGNAME$.$CLASSNAME$.fromValue(...
                fromMATLAB({'$CLASSNAME$','value'},obj.Value,'$TYPE$',false));
        end
    end

    methods (Static, Hidden, Access = {?$SERVICES$$CLASSES$})
        function obj = getInstance(javaObject, isArray) 
        % Return a $CLASSNAME$ object constructed from the javaObject.
        % If isArray, javaObject is java.util.List which of objects and we'll return array.
            if nargin == 0 || isempty(javaObject)
                obj = [];
                return
            end
            if nargin > 1 && isArray
                if javaObject.size == 0
                    obj = [];
                    return
                end
                for i = jobj.size : -1 : 1
                    obj(i,1) = $PKGNAME$.$CLASSNAME$.getInstance(javaObject.get(i-1));
                end
            else
                import matlab.wsdl.internal.toMATLAB
                obj = $PKGNAME$.$CLASSNAME$(toMATLAB(javaObject.value,'$TYPE$',false));
            end
        end
    end
end