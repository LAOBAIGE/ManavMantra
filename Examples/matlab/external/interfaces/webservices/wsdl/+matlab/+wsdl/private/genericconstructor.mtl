%% Copyright 2014 The MathWorks, Inc.
%%
%% GENERICCONSTRUCTOR.MTL
%%    Template for matlab.wsdl.createClient, for a class definition of a type 
%%    declared in the WSDL.
%% Lines beginning with %% don't appear in the generated output for this template
%% This MATLAB class is a wrapper for the Java class of the same name
%% CLASSNAME           -- The MATLAB/Java class name
%% PKGNAME             -- This package name
%% JAVAPKGNAME         -- The Java package name
%% ARGS                -- Names of the fields:       foo,bar,..
%% REQX                -- Required fields with 'x':  x.foo,x.bar,...
%% REQNAMES            -- Required fields quoted:    'foo','bar',...
%% DERIVEDX            -- Derived fields with 'x':   x.foo,x.bar,...
%% DOCUMENTATION       -- Docs on the parameters
%% H1DOC               -- H1 line
%% DATETIME            -- Now
%% NAMES               -- Comma-separated list of MATLAB class names (services) this supports
%% SERVICES            -- Same, but with ? in front of each name, except the 1st
%% PROPERTIES          -- list of properties, one per line (same as ARGS except 
%%                        those inherited from concrete superclasses)
%% SAVEPARAMS          -- Statements that save the argument in a property of the same name
%% CLASSES             -- comma-separated list of other classes in this package:
%%                            ,?pkg.class1,?pkg.class2,...
%% SETTERS             -- statements to set fields of the Java object from fields of this object:
%%                            jobj.setField(fromMATLAB({'objName','fieldName'},obj.field,'fieldType')); % basic XML type
%%                            jobj.setField(obj.field.getObj);      % MCOS object
%%                            jobj.setField(obj.field.getObj,true); % array
%% GETTERS             -- comma-separated args to this object's constructor extracted from Java object:
%%                            toMATLAB(jobj.getField,'fieldType') % basic XML type
%%                            wsdl.pkg.Field.getInstance(jobj.getField)  % MCOS type
%% CASES               -- if HASUBCLASSES, case statements for each subclass
%% GETTERHELP          -- help on convenience method to create one of these
%% SETMETHODS          -- set methods to verify type of field being set, except those
%%                        from concrete superclasses
%% SUPERCLASSES        -- comma-separated list of superclasses, if any, or empty
%% SUBTYPES            -- message about subtypes
%% INHERITS            -- the superclass, typically matlab.wsdl.internal.WsdlObject
%% WSDL                -- name of the WSDL file for the help
classdef $CLASSNAME$ < $INHERITS$
    % $CLASSNAME$($ARGS$)  $H1DOC$
$SUPERCLASSES$    %
$DOCUMENTATION$    %
    % $GETTERHELP$
$SUBTYPES$
    % See also $NAMES$.
    
    % This file generated by matlab.wsdl.createWSDLClient at $DATETIME$
    % from $WSDL$.  
    % Please do not alter this file.
    properties 
        $PROPERTIES$
    end
    
    methods
        function obj = $CLASSNAME$($ARGS$)
            if nargin == 0, return, end
$SAVEPARAMS$
        end
$SETMETHODS$
    end

    methods (Hidden, Access = {?matlab.wsdl.internal.WsdlObject,?$SERVICES$$CLASSES$})
        function validate(obj)
        % Test for required fields
            arrayfun(@(x) x.checkFields({$REQX$},{$REQNAMES$},{$DERIVEDX$}), obj);
        end
    end

    methods (Hidden, Access = protected)
        function jobj = getOneObj(obj)
        % Return the Java object corresponding to this object.  Intended
        % to be invoked from superclass.
            obj.validate
            import matlab.wsdl.internal.fromMATLAB
            jobj = $JAVAPKGNAME$.$CLASSNAME$;  % create empty Java object
            % populate fields of object
$SETTERS$
        end
    end
${NEEDSGETINSTANCE$

    methods (Static, Hidden, Access = {?$SERVICES$$CLASSES$})
        function obj = getInstance(jobj, isArray) 
        % Return a $CLASSNAME$ object constructed from the Java object jobj.
        % If isArray, jobj is java.util.List of objects and we'll return array.
            if nargin == 0 || isempty(jobj)
                obj = [];
                return
            end
${NEEDSSUBCLASSES$
            % see if jobj is one of the known subclasses
            getit = [];
            switch class(jobj)
$CASES$
            end
            if ~isempty(getit)
                % if a subclass, invoke its getInstance instead
                obj = getit(jobj,isArray);
                return
            end
$}$
            if nargin > 1 && isArray
                for i = jobj.size : -1 : 1
                    value = $PKGNAME$.$CLASSNAME$.getInstance(jobj.get(i-1));
                    if ~isempty(value) 
                        obj(i,1) = value;
                    end
                end
                if ~exist('obj','var')
                    obj = [];
                end
            else
                import matlab.wsdl.internal.toMATLAB
                obj = $PKGNAME$.$CLASSNAME$( ...
$GETTERS$);
            end
        end
    end
$}$
end