%% Copyright 2013-2014 The MathWorks, Inc.
%%
%% constructor.mtl
%%    Template for createWsdlClient, for the class representing a service 
%% declared in the WSDL, one per SOAP binding
%% SERVICENAME:     The name of the service             HelloWorld
%% MCLASSNAME:      The MATLAB name for this class      helloWorld
%% ENDPOINT:        The URI of the published service    http://host/helloWorld
%% WSDLLOCATION:    The URI of the WSDL                 http://host/helloWorld?wsdl
%% WSDLLOCATIONMSG: The name of the file to  display in the help
%% SERVICE_CLASS:   The Java service class              helloWorld_Service
%% DATETIME:        Time of file creation
%% PORTNAME:        Name of the port function           helloWorldImplPort
%% METHODS:         Methods of the service              from wsdlmethod.mtl
%% GETTERS:         Static convenience methods that     from gettermethod.mtl
%%                  return instances of classes defined in this package
%% PKGNAME:         Package name for classes generated in this service
%% JARNAME:         Java jar name (minus .jar)
classdef $MCLASSNAME$
    % $MCLASSNAME$   A client to connect to the $SERVICENAME$ service
    %    SERVICE = $MCLASSNAME$  connects to $ENDPOINT$ and returns a SERVICE.
    %    
    %    To communicate with the service, call a function on the SERVICE:
    %
    %       [...] = FUNCTION(SERVICE,arg,...) 
    %
    %    See <a href="matlab:doc $MCLASSNAME$">doc $MCLASSNAME$</a> for a list of functions.
%%    %
%%    % $MCLASSNAME$ methods:
%%    %
%%$METHODHELP$
         
    % This file generated by matlab.wsdl.createWSDLClient at $DATETIME$
    % from $WSDLLOCATIONMSG$.  
    % Please do not alter this file.

    properties (SetAccess = immutable)
        Endpoint;  % service endpoint 
        WSDLFile;  % URI of WSDL
    end
    properties (Hidden)
        PortObj;   % the Java object implementing this client's methods
    end

    methods
        function obj = $MCLASSNAME$
            obj.WSDLFile = '$WSDLLOCATION$'; 
            try
                wsdlService = $SERVICE_CLASS$();
                obj.PortObj = wsdlService.get$PORTNAME$; 
                obj.Endpoint = char(wsdlService.getServiceName().toString);
            catch e
                if strcmp(e.identifier,'MATLAB:undefinedVarOrClass')
                    % if we couldn't find the service, see if expected jar is on classpath
                    dir = fileparts(mfilename('fullpath'));
                    % We expect this service's jar file to be in +wsdl subdirectory in 
                    % the same directory as this class file.
                    jpath = java.io.File(fullfile(dir, '+wsdl', '$JARNAME$.jar')).getCanonicalFile;
                    cp = javaclasspath('-all');
                    if ~any(cellfun(@(x)jpath.equals(java.io.File(x).getCanonicalFile), cp))
                        thePath = char(jpath.toString);
                        error(message('MATLAB:webservices:AddClasspath', '$MCLASSNAME$', thePath, thePath));
                    else
                        error(message('MATLAB:webservices:CannotFindClass', '$SERVICE_CLASS$'));
                    end
                else
                    rethrow(e);
                end
            end
        end
$METHODS$
        function display(obj)
            disp(obj)
        end
    end

    % These are static convenience methods for creating objects
    % that need to be passed in as parameters to service methods 
    % or other convenience methods, to avoid having to invoke the
    % constructors in the package $PKGNAME$.  
%% If the object is of class FooBar, then the convenience method is 
%% called getFooBar (or getFooBarObj in case of a name conflict with one of the
%% service methods.)
%% These map 1:1 with the constructors generated from genericconstructor.mtl.
    methods (Static)
$GETTERS$
    end
end

