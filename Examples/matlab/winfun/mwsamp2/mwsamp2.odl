/* Copyright 2001 The MathWorks, Inc. */

// mwsamp2.odl : type library source for ActiveX Control project.

// This file will be processed by the Make Type Library (mktyplib) tool to
// produce the type library (mwsamp2.tlb) that will become a resource in
// mwsamp2.ocx.


[ uuid(4D02E050-24D8-4D35-A1C6-FB9304568135), version(1.0),
  helpfile("mwsamp2.hlp"),
  helpstring("mwsamp2 ActiveX Control module"),
  control ]
library MWSAMP2Lib
{
	#include <idispids.h>
	#include <olectl.h>
	importlib(STDOLE_TLB);
	importlib(STDTYPE_TLB);

	//  Primary dispatch interface for CMwsamp2Ctrl

	[ uuid(13E74B28-5DEB-464C-AD59-1D4CAD156869),
	  helpstring("Dispatch interface for Mwsamp2 Control"), hidden ]
	dispinterface _DMwsamp2
	{
		properties:
			// NOTE - ClassWizard will maintain property information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_PROP(CMwsamp2Ctrl)
			[id(1)] BSTR Label;
			[id(2)] short Radius;
			[id(3)] IDispatch* Ret_IDispatch;
			//}}AFX_ODL_PROP

		methods:
			// NOTE - ClassWizard will maintain method information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_METHOD(CMwsamp2Ctrl)
			[id(5)] void Beep();
			[id(6)] void FireClickEvent();
			[id(7)] BSTR GetBSTR();
			[id(8)] VARIANT GetBSTRArray();
			[id(9)] long GetI4();
			[id(10)] VARIANT GetI4Array();
			[id(11)] VARIANT GetI4Vector();
			[id(12)] IDispatch* GetIDispatch();
			[id(13)] double GetR8();
			[id(14)] VARIANT GetR8Array();
			[id(15)] VARIANT GetR8Vector();
			[id(16)] VARIANT GetVariantArray();
			[id(17)] VARIANT GetVariantVector();
			[id(18)] void Redraw();
			[id(19)] BSTR SetBSTR(BSTR b);
			[id(20)] VARIANT SetBSTRArray(VARIANT v);
			[id(21)] long SetI4(long l);
			[id(22)] VARIANT SetI4Array(VARIANT v);
			[id(23)] VARIANT SetI4Vector(VARIANT v);
			[id(24)] double SetR8(double d);
			[id(25)] VARIANT SetR8Array(VARIANT v);
			[id(26)] VARIANT SetR8Vector(VARIANT v);
			[id(27)] void FireEventArgs();
			[id(28)] double AddDouble(double db1, double db2);
			[id(29)] void FireMouseDownEvent();
			[id(30)] VARIANT ShowVariant(short arg, VARIANT var1, VARIANT var2, VARIANT var3, VARIANT var4);
			[id(31)] VARIANT ReturnVTError();
			[id(32)] void Fire_Double_Click();
			[id(33)] boolean SetIDispatch(IDispatch* arg1);
			[id(34)] boolean VariantOfTypeHandle(VARIANT arg1);
			[id(35)] SCODE RetErrorInfo();
			//}}AFX_ODL_METHOD

			[id(DISPID_ABOUTBOX)] void AboutBox();
	};

	//  Event dispatch interface for CMwsamp2Ctrl

	[ uuid(8C74663F-CCF6-4292-8A7C-DDC8A754A866),
	  helpstring("Event interface for Mwsamp2 Control") ]
	dispinterface _DMwsamp2Events
	{
		properties:
			//  Event interface has no properties

		methods:
			// NOTE - ClassWizard will maintain event information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_EVENT(CMwsamp2Ctrl)
			[id(DISPID_CLICK)] void Click();
			[id(DISPID_DBLCLICK)] void DblClick();
			[id(DISPID_MOUSEDOWN)] void MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			[id(1)] void Event_Args(short typeshort, long typelong, double typedouble, BSTR typestring, boolean typebool);
			//}}AFX_ODL_EVENT
	};

	//  Class information for CMwsamp2Ctrl

	[ uuid(5771A80A-2294-4CAC-A75B-157DCDDD3653),
	  helpstring("Mwsamp2 Control"), control ]
	coclass Mwsamp2
	{
		[default] dispinterface _DMwsamp2;
		[default, source] dispinterface _DMwsamp2Events;
	};


	//{{AFX_APPEND_ODL}}
	//}}AFX_APPEND_ODL}}
};
