function B = imbilatfilt(varargin) %#codegen

% Copyright 2017 The MathWorks, Inc.


[A, NeighborhoodSize, DegreeOfSmoothing, SpatialSigma, Padding, PadVal] = ...
    parseInputsCG(varargin{:});

% Convert to standard deviation
rangeSigma = sqrt(DegreeOfSmoothing);

B = images.internal.algimbilateralfilter(A, [NeighborhoodSize, NeighborhoodSize],...
    rangeSigma, SpatialSigma, Padding, PadVal);

end


function [A, NeighborhoodSize, DegreeOfSmoothing, SpatialSigma, Padding, PadVal] = parseInputsCG(varargin)
coder.internal.prefer_const(varargin{:});

narginchk(1,inf);

A = varargin{1};
if ismatrix(A)
    checkDims = 2;
else
    checkDims = 3;
end
validateattributes(...
    A, {'numeric'}, ...
    {'nonsparse','nonempty', 'real', 'ndims', checkDims},...
    mfilename, 'A');

pvStartInd = 2;

if nargin>1
    DegreeOfSmoothing = varargin{2};
    validateattributes(...
        DegreeOfSmoothing, {'numeric'},...
        {'scalar','real','finite','positive'},...
        mfilename, 'DegreeOfSmoothing');
    pvStartInd = pvStartInd+1;
else
    DegreeOfSmoothing = 0.01*diff(getrangefromclass(A)).^2;
end

if nargin>2
    SpatialSigma = varargin{3};
    validateattributes(...
        SpatialSigma , {'numeric'},...
        {'scalar','real','finite','positive'},...
        mfilename, 'SpatialSigma');
    pvStartInd = pvStartInd+1;
else
    SpatialSigma = 1;
end

NeighborhoodSize_ = 2*ceil(2*SpatialSigma)+1;
Padding_ = 'replicate';

% PVs
params = struct(...
    'NeighborhoodSize', uint32(0),...
    'Padding', uint32(0));
options = struct(...
    'CaseSensitivity',false, ...
    'StructExpand',   true, ...
    'PartialMatching',true);
optarg = eml_parse_parameter_inputs(params,options, varargin{pvStartInd:end});
NeighborhoodSize = eml_get_parameter_value(...
    optarg.NeighborhoodSize,...
    NeighborhoodSize_,...
    varargin{pvStartInd:end});

Padding = eml_get_parameter_value(...
    optarg.Padding,...
    Padding_,...
    varargin{pvStartInd:end});

validateattributes(NeighborhoodSize, ...
    {'numeric'},...
    {'nonsparse', 'nonempty', 'finite', 'real', 'odd', 'numel', 1},...
    mfilename, 'NeighborhoodSize');
coder.internal.errorIf(min([size(A,1), size(A,2)]) < NeighborhoodSize,...
    'images:imbilatfilt:imageNotMinSize', NeighborhoodSize);

if ~ischar(Padding) && ~isstring(Padding)
    validateattributes(Padding,...
        {'numeric','logical'}, ...
        {'real','scalar','nonsparse'}, ...
        mfilename, 'Padding');
    PadVal = double(Padding); % will be cast later
    Padding = 'constant';
else
    Padding = validatestring(Padding,...
        {'replicate','symmetric'}, ...
        mfilename, 'Padding');
    PadVal = 0;
end

end
